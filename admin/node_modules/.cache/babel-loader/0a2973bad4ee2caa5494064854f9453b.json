{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { randomArrayItem } from './random-generator';\nexport const addTreeDataOptionsToDemoData = function (data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _groupingCol$headerNa;\n  const {\n    averageChildren = 2,\n    maxDepth = 1,\n    groupingField\n  } = options;\n  const hasTreeData = maxDepth > 1 && groupingField != null;\n  if (!hasTreeData) {\n    return data;\n  }\n  if (data.rows.length > 1000) {\n    throw new Error('MUI: useDemoData tree data mode only works up to 1000 rows.');\n  }\n  const rowsByTreeDepth = {};\n  const rowsCount = data.rows.length;\n  const groupingCol = data.columns.find(col => col.field === options.groupingField);\n  if (!groupingCol) {\n    throw new Error('MUI: The tree data grouping field does not exist');\n  }\n  data.initialState.columns.columnVisibilityModel[groupingField] = false;\n  for (let i = 0; i < rowsCount; i += 1) {\n    const row = data.rows[i];\n    const currentChunk = Math.floor(i * (averageChildren ** maxDepth - 1) / rowsCount) + 1;\n    const currentDepth = Math.floor(Math.log(currentChunk) / Math.log(averageChildren));\n    if (!rowsByTreeDepth[currentDepth]) {\n      rowsByTreeDepth[currentDepth] = {\n        rows: {},\n        rowIndexes: []\n      };\n    }\n    rowsByTreeDepth[currentDepth].rows[i] = {\n      value: row,\n      parentIndex: null\n    };\n    rowsByTreeDepth[currentDepth].rowIndexes.push(i);\n  }\n  Object.entries(rowsByTreeDepth).forEach(_ref => {\n    let [depthStr, {\n      rows\n    }] = _ref;\n    const depth = Number(depthStr);\n    Object.values(rows).forEach(row => {\n      const path = [];\n      let previousRow = null;\n      for (let k = depth; k >= 0; k -= 1) {\n        let rowTemp;\n        if (k === depth) {\n          if (depth > 0) {\n            row.parentIndex = Number(randomArrayItem(rowsByTreeDepth[depth - 1].rowIndexes));\n          }\n          rowTemp = row;\n        } else {\n          rowTemp = rowsByTreeDepth[k].rows[previousRow.parentIndex];\n        }\n        path.unshift(rowTemp.value[groupingField]);\n        previousRow = rowTemp;\n      }\n      row.value.path = path;\n    });\n  });\n  return _extends({}, data, {\n    groupingColDef: {\n      headerName: (_groupingCol$headerNa = groupingCol.headerName) != null ? _groupingCol$headerNa : groupingCol.field,\n      width: 250\n    },\n    getTreeDataPath: row => row.path,\n    treeData: true\n  });\n};","map":{"version":3,"names":["_extends","randomArrayItem","addTreeDataOptionsToDemoData","data","options","arguments","length","undefined","_groupingCol$headerNa","averageChildren","maxDepth","groupingField","hasTreeData","rows","Error","rowsByTreeDepth","rowsCount","groupingCol","columns","find","col","field","initialState","columnVisibilityModel","i","row","currentChunk","Math","floor","currentDepth","log","rowIndexes","value","parentIndex","push","Object","entries","forEach","_ref","depthStr","depth","Number","values","path","previousRow","k","rowTemp","unshift","groupingColDef","headerName","width","getTreeDataPath","treeData"],"sources":["D:/Tanot/admin/node_modules/@mui/x-data-grid-generator/services/tree-data-generator.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { randomArrayItem } from './random-generator';\nexport const addTreeDataOptionsToDemoData = (data, options = {}) => {\n  var _groupingCol$headerNa;\n  const {\n    averageChildren = 2,\n    maxDepth = 1,\n    groupingField\n  } = options;\n  const hasTreeData = maxDepth > 1 && groupingField != null;\n  if (!hasTreeData) {\n    return data;\n  }\n  if (data.rows.length > 1000) {\n    throw new Error('MUI: useDemoData tree data mode only works up to 1000 rows.');\n  }\n  const rowsByTreeDepth = {};\n  const rowsCount = data.rows.length;\n  const groupingCol = data.columns.find(col => col.field === options.groupingField);\n  if (!groupingCol) {\n    throw new Error('MUI: The tree data grouping field does not exist');\n  }\n  data.initialState.columns.columnVisibilityModel[groupingField] = false;\n  for (let i = 0; i < rowsCount; i += 1) {\n    const row = data.rows[i];\n    const currentChunk = Math.floor(i * (averageChildren ** maxDepth - 1) / rowsCount) + 1;\n    const currentDepth = Math.floor(Math.log(currentChunk) / Math.log(averageChildren));\n    if (!rowsByTreeDepth[currentDepth]) {\n      rowsByTreeDepth[currentDepth] = {\n        rows: {},\n        rowIndexes: []\n      };\n    }\n    rowsByTreeDepth[currentDepth].rows[i] = {\n      value: row,\n      parentIndex: null\n    };\n    rowsByTreeDepth[currentDepth].rowIndexes.push(i);\n  }\n  Object.entries(rowsByTreeDepth).forEach(([depthStr, {\n    rows\n  }]) => {\n    const depth = Number(depthStr);\n    Object.values(rows).forEach(row => {\n      const path = [];\n      let previousRow = null;\n      for (let k = depth; k >= 0; k -= 1) {\n        let rowTemp;\n        if (k === depth) {\n          if (depth > 0) {\n            row.parentIndex = Number(randomArrayItem(rowsByTreeDepth[depth - 1].rowIndexes));\n          }\n          rowTemp = row;\n        } else {\n          rowTemp = rowsByTreeDepth[k].rows[previousRow.parentIndex];\n        }\n        path.unshift(rowTemp.value[groupingField]);\n        previousRow = rowTemp;\n      }\n      row.value.path = path;\n    });\n  });\n  return _extends({}, data, {\n    groupingColDef: {\n      headerName: (_groupingCol$headerNa = groupingCol.headerName) != null ? _groupingCol$headerNa : groupingCol.field,\n      width: 250\n    },\n    getTreeDataPath: row => row.path,\n    treeData: true\n  });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}