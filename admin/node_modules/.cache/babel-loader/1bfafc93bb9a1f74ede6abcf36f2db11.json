{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { isNavigationKey, serializeCellValue, useGridRegisterPipeProcessor, useGridVisibleRows } from '@mui/x-data-grid-pro/internals';\nimport { useGridApiEventHandler, useGridApiMethod, GRID_ACTIONS_COLUMN_TYPE, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_FIELD, gridRowsDataRowIdToIdLookupSelector, gridClasses, gridFocusCellSelector } from '@mui/x-data-grid-pro';\nimport { gridCellSelectionStateSelector } from './gridCellSelectionSelector';\nexport const cellSelectionStateInitializer = (state, props) => {\n  var _props$unstable_cellS, _props$initialState;\n  return _extends({}, state, {\n    cellSelection: _extends({}, (_props$unstable_cellS = props.unstable_cellSelectionModel) != null ? _props$unstable_cellS : (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.cellSelection)\n  });\n};\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nexport const useGridCellSelection = (apiRef, props) => {\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.unstable_cellSelectionModel,\n    propOnChange: props.unstable_onCellSelectionModelChange,\n    stateSelector: gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n  const runIfCellSelectionIsEnabled = callback => function () {\n    if (props.unstable_cellSelection) {\n      callback(...arguments);\n    }\n  };\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.unstable_cellSelection) {\n      return false;\n    }\n    const cellSelectionModel = gridCellSelectionStateSelector(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.unstable_cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return gridCellSelectionStateSelector(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.unstable_cellSelection) {\n      return;\n    }\n    apiRef.current.setState(prevState => _extends({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.unstable_cellSelection]);\n  const selectCellRange = React.useCallback(function (start, end) {\n    let keepOtherSelected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.unstable_getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.unstable_setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.unstable_getCellSelectionModel();\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n    return Object.entries(model).reduce((acc, _ref) => {\n      let [id, fields] = _ref;\n      return [...acc, ...Object.entries(fields).reduce((acc2, _ref2) => {\n        let [field, isSelected] = _ref2;\n        return isSelected ? [...acc2, {\n          id: idToIdLookup[id],\n          field\n        }] : acc2;\n      }, [])];\n    }, []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    unstable_isCellSelected: isCellSelected,\n    unstable_getCellSelectionModel: getCellSelectionModel,\n    unstable_setCellSelectionModel: setCellSelectionModel,\n    unstable_selectCellRange: selectCellRange,\n    unstable_getSelectedCellsAsArray: getSelectedCellsAsArray\n  };\n  useGridApiMethod(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n    const column = apiRef.current.getColumn(params.field);\n    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    var _apiRef$current$rootE, _apiRef$current$rootE2;\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : (_apiRef$current$rootE2 = _apiRef$current$rootE.current) == null ? void 0 : _apiRef$current$rootE2.classList.add(gridClasses['root--disableUserSelection']);\n  }, [apiRef, hasClickedValidCellForRangeSelection]);\n  const handleCellMouseUp = React.useCallback(() => {\n    var _apiRef$current$rootE3, _apiRef$current$rootE4;\n    lastMouseDownCell.current = null;\n    (_apiRef$current$rootE3 = apiRef.current.rootElementRef) == null ? void 0 : (_apiRef$current$rootE4 = _apiRef$current$rootE3.current) == null ? void 0 : _apiRef$current$rootE4.classList.remove(gridClasses['root--disableUserSelection']);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n  }, [apiRef]);\n  const handleCellClick = useEventCallback((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.unstable_selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.unstable_getCellSelectionModel();\n      apiRef.current.unstable_setCellSelectionModel(_extends({}, prevModel, {\n        [id]: _extends({}, prevModel[id], {\n          [field]: !apiRef.current.unstable_isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.unstable_setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = useEventCallback((params, event) => {\n    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n    if (!event.shiftKey) {\n      apiRef.current.unstable_setCellSelectionModel({});\n      return;\n    }\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  useGridApiEventHandler(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  useGridApiEventHandler(apiRef, 'cellMouseUp', runIfCellSelectionIsEnabled(handleCellMouseUp));\n  useGridApiEventHandler(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.unstable_cellSelectionModel) {\n      apiRef.current.unstable_setCellSelectionModel(props.unstable_cellSelectionModel);\n    }\n  }, [apiRef, props.unstable_cellSelectionModel]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, _ref3) => {\n    let {\n      id,\n      field\n    } = _ref3;\n    return apiRef.current.unstable_isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, _ref4) => {\n    let {\n      id,\n      field\n    } = _ref4;\n    const newClasses = [...classes];\n    if (!visibleRows.range || !apiRef.current.unstable_isCellSelected(id, field)) {\n      return classes;\n    }\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(previousRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeTop']);\n    }\n    if (rowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(nextRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeBottom']);\n    }\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(id, previousColumnField)) {\n        newClasses.push(gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeLeft']);\n    }\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(id, nextColumnField)) {\n        newClasses.push(gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeRight']);\n    }\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, _ref5) => {\n    let {\n      event,\n      cell\n    } = _ref5;\n    if (!cell || !props.unstable_cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n    if (isKeyboardEvent(event)) {\n      return isNavigationKey(event.key) ? false : initialValue;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n    return initialValue;\n  }, [apiRef, props.unstable_cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.unstable_getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n    const cellSelectionModel = apiRef.current.unstable_getCellSelectionModel();\n    const copyData = Object.keys(cellSelectionModel).reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = serializeCellValue(cellParams, {\n            delimiterCharacter: clipboardCopyCellDelimiter,\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  useGridRegisterPipeProcessor(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  useGridRegisterPipeProcessor(apiRef, 'cellClassName', addClassesToCells);\n  useGridRegisterPipeProcessor(apiRef, 'canUpdateFocus', canUpdateFocus);\n  useGridRegisterPipeProcessor(apiRef, 'clipboardCopy', handleClipboardCopy);\n};","map":{"version":3,"names":["_extends","React","useEventCallback","isNavigationKey","serializeCellValue","useGridRegisterPipeProcessor","useGridVisibleRows","useGridApiEventHandler","useGridApiMethod","GRID_ACTIONS_COLUMN_TYPE","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridRowsDataRowIdToIdLookupSelector","gridClasses","gridFocusCellSelector","gridCellSelectionStateSelector","cellSelectionStateInitializer","state","props","_props$unstable_cellS","_props$initialState","cellSelection","unstable_cellSelectionModel","initialState","isKeyboardEvent","event","key","useGridCellSelection","apiRef","visibleRows","cellWithVirtualFocus","useRef","lastMouseDownCell","ignoreValueFormatterProp","unstable_ignoreValueFormatterDuringExport","ignoreValueFormatter","clipboardExport","clipboardCopyCellDelimiter","current","registerControlState","stateId","propModel","propOnChange","unstable_onCellSelectionModelChange","stateSelector","changeEvent","runIfCellSelectionIsEnabled","callback","unstable_cellSelection","arguments","isCellSelected","useCallback","id","field","cellSelectionModel","getCellSelectionModel","setCellSelectionModel","newModel","setState","prevState","forceUpdate","selectCellRange","start","end","keepOtherSelected","length","undefined","startRowIndex","getRowIndexRelativeToVisibleRows","startColumnIndex","getColumnIndex","endRowIndex","endColumnIndex","finalStartRowIndex","finalStartColumnIndex","finalEndRowIndex","finalEndColumnIndex","visibleColumns","getVisibleColumns","rowsInRange","rows","slice","columnsInRange","unstable_getCellSelectionModel","forEach","row","column","unstable_setCellSelectionModel","getSelectedCellsAsArray","model","idToIdLookup","Object","entries","reduce","acc","_ref","fields","acc2","_ref2","isSelected","cellSelectionApi","unstable_isCellSelected","unstable_selectCellRange","unstable_getSelectedCellsAsArray","hasClickedValidCellForRangeSelection","params","getColumn","type","rowNode","handleCellMouseDown","_apiRef$current$rootE","_apiRef$current$rootE2","isMacOs","window","navigator","platform","toUpperCase","indexOf","button","ctrlKey","focusedCell","shiftKey","preventDefault","rootElementRef","classList","add","handleCellMouseUp","_apiRef$current$rootE3","_apiRef$current$rootE4","remove","handleCellFocusIn","handleCellMouseOver","metaKey","handleCellClick","prevModel","handleCellKeyDown","otherCell","useEffect","checkIfCellIsSelected","_ref3","addClassesToCells","classes","_ref4","newClasses","range","rowIndex","columnIndex","previousRowId","push","lastRowIndex","nextRowId","previousColumnField","nextColumnField","canUpdateFocus","initialValue","_ref5","cell","handleClipboardCopy","value","copyData","keys","rowId","fieldsMap","rowString","cellData","cellParams","getCellParams","delimiterCharacter","join"],"sources":["D:/Tanot/admin/node_modules/@mui/x-data-grid-generator/node_modules/@mui/x-data-grid-premium/hooks/features/cellSelection/useGridCellSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { isNavigationKey, serializeCellValue, useGridRegisterPipeProcessor, useGridVisibleRows } from '@mui/x-data-grid-pro/internals';\nimport { useGridApiEventHandler, useGridApiMethod, GRID_ACTIONS_COLUMN_TYPE, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_FIELD, gridRowsDataRowIdToIdLookupSelector, gridClasses, gridFocusCellSelector } from '@mui/x-data-grid-pro';\nimport { gridCellSelectionStateSelector } from './gridCellSelectionSelector';\nexport const cellSelectionStateInitializer = (state, props) => {\n  var _props$unstable_cellS, _props$initialState;\n  return _extends({}, state, {\n    cellSelection: _extends({}, (_props$unstable_cellS = props.unstable_cellSelectionModel) != null ? _props$unstable_cellS : (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.cellSelection)\n  });\n};\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nexport const useGridCellSelection = (apiRef, props) => {\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const cellWithVirtualFocus = React.useRef();\n  const lastMouseDownCell = React.useRef();\n  const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;\n  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;\n  apiRef.current.registerControlState({\n    stateId: 'cellSelection',\n    propModel: props.unstable_cellSelectionModel,\n    propOnChange: props.unstable_onCellSelectionModelChange,\n    stateSelector: gridCellSelectionStateSelector,\n    changeEvent: 'cellSelectionChange'\n  });\n  const runIfCellSelectionIsEnabled = callback => (...args) => {\n    if (props.unstable_cellSelection) {\n      callback(...args);\n    }\n  };\n  const isCellSelected = React.useCallback((id, field) => {\n    if (!props.unstable_cellSelection) {\n      return false;\n    }\n    const cellSelectionModel = gridCellSelectionStateSelector(apiRef.current.state);\n    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;\n  }, [apiRef, props.unstable_cellSelection]);\n  const getCellSelectionModel = React.useCallback(() => {\n    return gridCellSelectionStateSelector(apiRef.current.state);\n  }, [apiRef]);\n  const setCellSelectionModel = React.useCallback(newModel => {\n    if (!props.unstable_cellSelection) {\n      return;\n    }\n    apiRef.current.setState(prevState => _extends({}, prevState, {\n      cellSelection: newModel\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, props.unstable_cellSelection]);\n  const selectCellRange = React.useCallback((start, end, keepOtherSelected = false) => {\n    const startRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(start.id);\n    const startColumnIndex = apiRef.current.getColumnIndex(start.field);\n    const endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(end.id);\n    const endColumnIndex = apiRef.current.getColumnIndex(end.field);\n    let finalStartRowIndex = startRowIndex;\n    let finalStartColumnIndex = startColumnIndex;\n    let finalEndRowIndex = endRowIndex;\n    let finalEndColumnIndex = endColumnIndex;\n    if (finalStartRowIndex > finalEndRowIndex) {\n      finalStartRowIndex = endRowIndex;\n      finalEndRowIndex = startRowIndex;\n    }\n    if (finalStartColumnIndex > finalEndColumnIndex) {\n      finalStartColumnIndex = endColumnIndex;\n      finalEndColumnIndex = startColumnIndex;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);\n    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);\n    const newModel = keepOtherSelected ? apiRef.current.unstable_getCellSelectionModel() : {};\n    rowsInRange.forEach(row => {\n      if (!newModel[row.id]) {\n        newModel[row.id] = {};\n      }\n      columnsInRange.forEach(column => {\n        newModel[row.id][column.field] = true;\n      }, {});\n    });\n    apiRef.current.unstable_setCellSelectionModel(newModel);\n  }, [apiRef, visibleRows.rows]);\n  const getSelectedCellsAsArray = React.useCallback(() => {\n    const model = apiRef.current.unstable_getCellSelectionModel();\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n    return Object.entries(model).reduce((acc, [id, fields]) => [...acc, ...Object.entries(fields).reduce((acc2, [field, isSelected]) => {\n      return isSelected ? [...acc2, {\n        id: idToIdLookup[id],\n        field\n      }] : acc2;\n    }, [])], []);\n  }, [apiRef]);\n  const cellSelectionApi = {\n    unstable_isCellSelected: isCellSelected,\n    unstable_getCellSelectionModel: getCellSelectionModel,\n    unstable_setCellSelectionModel: setCellSelectionModel,\n    unstable_selectCellRange: selectCellRange,\n    unstable_getSelectedCellsAsArray: getSelectedCellsAsArray\n  };\n  useGridApiMethod(apiRef, cellSelectionApi, 'public');\n  const hasClickedValidCellForRangeSelection = React.useCallback(params => {\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      return false;\n    }\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      return false;\n    }\n    const column = apiRef.current.getColumn(params.field);\n    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n      return false;\n    }\n    return params.rowNode.type !== 'pinnedRow';\n  }, [apiRef]);\n  const handleCellMouseDown = React.useCallback((params, event) => {\n    var _apiRef$current$rootE, _apiRef$current$rootE2;\n    // Skip if the click comes from the right-button or, only on macOS, Ctrl is pressed\n    // Fix for https://github.com/mui/mui-x/pull/6567#issuecomment-1329155578\n    const isMacOs = window.navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n    if (event.button !== 0 || event.ctrlKey && isMacOs) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {\n      event.preventDefault();\n    }\n    lastMouseDownCell.current = {\n      id: params.id,\n      field: params.field\n    };\n    (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : (_apiRef$current$rootE2 = _apiRef$current$rootE.current) == null ? void 0 : _apiRef$current$rootE2.classList.add(gridClasses['root--disableUserSelection']);\n  }, [apiRef, hasClickedValidCellForRangeSelection]);\n  const handleCellMouseUp = React.useCallback(() => {\n    var _apiRef$current$rootE3, _apiRef$current$rootE4;\n    lastMouseDownCell.current = null;\n    (_apiRef$current$rootE3 = apiRef.current.rootElementRef) == null ? void 0 : (_apiRef$current$rootE4 = _apiRef$current$rootE3.current) == null ? void 0 : _apiRef$current$rootE4.classList.remove(gridClasses['root--disableUserSelection']);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    cellWithVirtualFocus.current = {\n      id: params.id,\n      field: params.field\n    };\n  }, []);\n  const handleCellMouseOver = React.useCallback((params, event) => {\n    if (!lastMouseDownCell.current) {\n      return;\n    }\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange(lastMouseDownCell.current, {\n      id,\n      field\n    }, event.ctrlKey || event.metaKey);\n  }, [apiRef]);\n  const handleCellClick = useEventCallback((params, event) => {\n    const {\n      id,\n      field\n    } = params;\n    if (!hasClickedValidCellForRangeSelection(params)) {\n      return;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (event.shiftKey && focusedCell) {\n      apiRef.current.unstable_selectCellRange(focusedCell, {\n        id,\n        field\n      });\n      cellWithVirtualFocus.current = {\n        id,\n        field\n      };\n      return;\n    }\n    if (event.ctrlKey || event.metaKey) {\n      // Add the clicked cell to the selection\n      const prevModel = apiRef.current.unstable_getCellSelectionModel();\n      apiRef.current.unstable_setCellSelectionModel(_extends({}, prevModel, {\n        [id]: _extends({}, prevModel[id], {\n          [field]: !apiRef.current.unstable_isCellSelected(id, field)\n        })\n      }));\n    } else {\n      // Clear the selection and keep only the clicked cell selected\n      apiRef.current.unstable_setCellSelectionModel({\n        [id]: {\n          [field]: true\n        }\n      });\n    }\n  });\n  const handleCellKeyDown = useEventCallback((params, event) => {\n    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {\n      return;\n    }\n    if (!event.shiftKey) {\n      apiRef.current.unstable_setCellSelectionModel({});\n      return;\n    }\n    const {\n      current: otherCell\n    } = cellWithVirtualFocus;\n    let endRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(otherCell.id);\n    let endColumnIndex = apiRef.current.getColumnIndex(otherCell.field);\n    if (event.key === 'ArrowDown') {\n      endRowIndex += 1;\n    } else if (event.key === 'ArrowUp') {\n      endRowIndex -= 1;\n    } else if (event.key === 'ArrowRight') {\n      endColumnIndex += 1;\n    } else if (event.key === 'ArrowLeft') {\n      endColumnIndex -= 1;\n    }\n    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {\n      return;\n    }\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {\n      return;\n    }\n    cellWithVirtualFocus.current = {\n      id: visibleRows.rows[endRowIndex].id,\n      field: visibleColumns[endColumnIndex].field\n    };\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_selectCellRange({\n      id,\n      field\n    }, cellWithVirtualFocus.current);\n  });\n  useGridApiEventHandler(apiRef, 'cellClick', runIfCellSelectionIsEnabled(handleCellClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfCellSelectionIsEnabled(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfCellSelectionIsEnabled(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfCellSelectionIsEnabled(handleCellMouseDown));\n  useGridApiEventHandler(apiRef, 'cellMouseUp', runIfCellSelectionIsEnabled(handleCellMouseUp));\n  useGridApiEventHandler(apiRef, 'cellMouseOver', runIfCellSelectionIsEnabled(handleCellMouseOver));\n  React.useEffect(() => {\n    if (props.unstable_cellSelectionModel) {\n      apiRef.current.unstable_setCellSelectionModel(props.unstable_cellSelectionModel);\n    }\n  }, [apiRef, props.unstable_cellSelectionModel]);\n  const checkIfCellIsSelected = React.useCallback((isSelected, {\n    id,\n    field\n  }) => {\n    return apiRef.current.unstable_isCellSelected(id, field);\n  }, [apiRef]);\n  const addClassesToCells = React.useCallback((classes, {\n    id,\n    field\n  }) => {\n    const newClasses = [...classes];\n    if (!visibleRows.range || !apiRef.current.unstable_isCellSelected(id, field)) {\n      return classes;\n    }\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const columnIndex = apiRef.current.getColumnIndex(field);\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    if (rowIndex > 0) {\n      const {\n        id: previousRowId\n      } = visibleRows.rows[rowIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(previousRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeTop']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeTop']);\n    }\n    if (rowIndex < visibleRows.range.lastRowIndex) {\n      const {\n        id: nextRowId\n      } = visibleRows.rows[rowIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(nextRowId, field)) {\n        newClasses.push(gridClasses['cell--rangeBottom']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeBottom']);\n    }\n    if (columnIndex > 0) {\n      const {\n        field: previousColumnField\n      } = visibleColumns[columnIndex - 1];\n      if (!apiRef.current.unstable_isCellSelected(id, previousColumnField)) {\n        newClasses.push(gridClasses['cell--rangeLeft']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeLeft']);\n    }\n    if (columnIndex < visibleColumns.length - 1) {\n      const {\n        field: nextColumnField\n      } = visibleColumns[columnIndex + 1];\n      if (!apiRef.current.unstable_isCellSelected(id, nextColumnField)) {\n        newClasses.push(gridClasses['cell--rangeRight']);\n      }\n    } else {\n      newClasses.push(gridClasses['cell--rangeRight']);\n    }\n    return newClasses;\n  }, [apiRef, visibleRows.range, visibleRows.rows]);\n  const canUpdateFocus = React.useCallback((initialValue, {\n    event,\n    cell\n  }) => {\n    if (!cell || !props.unstable_cellSelection || !event.shiftKey) {\n      return initialValue;\n    }\n    if (isKeyboardEvent(event)) {\n      return isNavigationKey(event.key) ? false : initialValue;\n    }\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {\n      return false;\n    }\n    return initialValue;\n  }, [apiRef, props.unstable_cellSelection, hasClickedValidCellForRangeSelection]);\n  const handleClipboardCopy = React.useCallback(value => {\n    if (apiRef.current.unstable_getSelectedCellsAsArray().length <= 1) {\n      return value;\n    }\n    const cellSelectionModel = apiRef.current.unstable_getCellSelectionModel();\n    const copyData = Object.keys(cellSelectionModel).reduce((acc, rowId) => {\n      const fieldsMap = cellSelectionModel[rowId];\n      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {\n        let cellData;\n        if (fieldsMap[field]) {\n          const cellParams = apiRef.current.getCellParams(rowId, field);\n          cellData = serializeCellValue(cellParams, {\n            delimiterCharacter: clipboardCopyCellDelimiter,\n            ignoreValueFormatter\n          });\n        } else {\n          cellData = '';\n        }\n        return acc2 === '' ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);\n      }, '');\n      return acc === '' ? rowString : [acc, rowString].join('\\r\\n');\n    }, '');\n    return copyData;\n  }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);\n  useGridRegisterPipeProcessor(apiRef, 'isCellSelected', checkIfCellIsSelected);\n  useGridRegisterPipeProcessor(apiRef, 'cellClassName', addClassesToCells);\n  useGridRegisterPipeProcessor(apiRef, 'canUpdateFocus', canUpdateFocus);\n  useGridRegisterPipeProcessor(apiRef, 'clipboardCopy', handleClipboardCopy);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}