{"ast":null,"code":"import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n  const filterCache = {};\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.type === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const {\n        passingFilterItems,\n        passingQuickFilterValues\n      } = isRowMatchingFilters(node.id);\n      isMatchingFilters = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, params.apiRef, filterCache);\n    }\n    let filteredDescendantCount = 0;\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        var _isMatchingFilters;\n        const childNode = rowTree[childId];\n        const childSubTreeSize = filterTreeNode(childNode, (_isMatchingFilters = isMatchingFilters) != null ? _isMatchingFilters : isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n        filteredDescendantCount += childSubTreeSize;\n      });\n    }\n    let shouldPassFilters;\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n    filteredRowsLookup[node.id] = shouldPassFilters;\n    if (!shouldPassFilters) {\n      return 0;\n    }\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n    if (node.type === 'footer') {\n      return filteredDescendantCount;\n    }\n    return filteredDescendantCount + 1;\n  };\n  const nodes = Object.values(rowTree);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n  return {\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};","map":{"version":3,"names":["passFilterLogic","TREE_DATA_STRATEGY","filterRowTreeFromTreeData","params","rowTree","disableChildrenFiltering","isRowMatchingFilters","filteredRowsLookup","filteredDescendantCountLookup","filterCache","filterTreeNode","node","isParentMatchingFilters","areAncestorsExpanded","shouldSkipFilters","depth","isMatchingFilters","type","passingFilterItems","passingQuickFilterValues","id","filterModel","apiRef","filteredDescendantCount","children","forEach","childId","_isMatchingFilters","childNode","childSubTreeSize","childrenExpanded","shouldPassFilters","nodes","Object","values","i","length"],"sources":["D:/Tanot/admin/node_modules/@mui/x-data-grid-generator/node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid-pro/hooks/features/treeData/gridTreeDataUtils.js"],"sourcesContent":["import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n  const filterCache = {};\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.type === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const {\n        passingFilterItems,\n        passingQuickFilterValues\n      } = isRowMatchingFilters(node.id);\n      isMatchingFilters = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, params.apiRef, filterCache);\n    }\n    let filteredDescendantCount = 0;\n    if (node.type === 'group') {\n      node.children.forEach(childId => {\n        var _isMatchingFilters;\n        const childNode = rowTree[childId];\n        const childSubTreeSize = filterTreeNode(childNode, (_isMatchingFilters = isMatchingFilters) != null ? _isMatchingFilters : isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n        filteredDescendantCount += childSubTreeSize;\n      });\n    }\n    let shouldPassFilters;\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n    filteredRowsLookup[node.id] = shouldPassFilters;\n    if (!shouldPassFilters) {\n      return 0;\n    }\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n    if (node.type === 'footer') {\n      return filteredDescendantCount;\n    }\n    return filteredDescendantCount + 1;\n  };\n  const nodes = Object.values(rowTree);\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n  return {\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}