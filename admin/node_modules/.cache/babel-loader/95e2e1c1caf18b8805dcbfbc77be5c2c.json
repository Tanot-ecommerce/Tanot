{"ast":null,"code":"import * as React from 'react';\nimport clsx from 'clsx';\nimport { alpha, styled } from '@mui/material/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Value = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    width: '100%',\n    height: '100%',\n    lineHeight: '100%',\n    paddingRight: 8,\n    fontVariantNumeric: 'tabular-nums',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    '&.good': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.success.mainChannel} /  0.3)` : alpha(theme.palette.success.main, 0.3)\n    },\n    '&.bad': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.error.mainChannel} /  0.3)` : alpha(theme.palette.error.main, 0.3)\n    }\n  };\n});\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\nconst TotalPrice = /*#__PURE__*/React.memo(function TotalPrice(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsx(Value, {\n    className: clsx(value > 1000000 && \"good\", value < 1000000 && \"bad\"),\n    children: currencyFormatter.format(value)\n  });\n});\nexport function renderTotalPrice(params) {\n  if (params.value == null) {\n    return '';\n  }\n\n  // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(TotalPrice, {\n    value: params.value\n  });\n}","map":{"version":3,"names":["React","clsx","alpha","styled","jsx","_jsx","Value","_ref","theme","width","height","lineHeight","paddingRight","fontVariantNumeric","display","alignItems","justifyContent","backgroundColor","vars","palette","success","mainChannel","main","error","currencyFormatter","Intl","NumberFormat","style","currency","TotalPrice","memo","props","value","className","children","format","renderTotalPrice","params","aggregation","hasCellUnit"],"sources":["D:/Tanot/admin/node_modules/@mui/x-data-grid-generator/renderer/renderTotalPrice.js"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport { alpha, styled } from '@mui/material/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Value = styled('div')(({\n  theme\n}) => ({\n  width: '100%',\n  height: '100%',\n  lineHeight: '100%',\n  paddingRight: 8,\n  fontVariantNumeric: 'tabular-nums',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  '&.good': {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.success.mainChannel} /  0.3)` : alpha(theme.palette.success.main, 0.3)\n  },\n  '&.bad': {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.error.mainChannel} /  0.3)` : alpha(theme.palette.error.main, 0.3)\n  }\n}));\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\nconst TotalPrice = /*#__PURE__*/React.memo(function TotalPrice(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsx(Value, {\n    className: clsx(value > 1000000 && \"good\", value < 1000000 && \"bad\"),\n    children: currencyFormatter.format(value)\n  });\n});\nexport function renderTotalPrice(params) {\n  if (params.value == null) {\n    return '';\n  }\n\n  // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(TotalPrice, {\n    value: params.value\n  });\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,KAAK,EAAEC,MAAM,QAAQ,sBAAsB;AACpD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,KAAK,GAAGH,MAAM,CAAC,KAAK,CAAC,CAACI,IAAA;EAAA,IAAC;IAC3BC;EACF,CAAC,GAAAD,IAAA;EAAA,OAAM;IACLE,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE,CAAC;IACfC,kBAAkB,EAAE,cAAc;IAClCC,OAAO,EAAE,MAAM;IACfC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,UAAU;IAC1B,QAAQ,EAAE;MACRC,eAAe,EAAET,KAAK,CAACU,IAAI,GAAI,QAAOV,KAAK,CAACU,IAAI,CAACC,OAAO,CAACC,OAAO,CAACC,WAAY,UAAS,GAAGnB,KAAK,CAACM,KAAK,CAACW,OAAO,CAACC,OAAO,CAACE,IAAI,EAAE,GAAG;IAChI,CAAC;IACD,OAAO,EAAE;MACPL,eAAe,EAAET,KAAK,CAACU,IAAI,GAAI,QAAOV,KAAK,CAACU,IAAI,CAACC,OAAO,CAACI,KAAK,CAACF,WAAY,UAAS,GAAGnB,KAAK,CAACM,KAAK,CAACW,OAAO,CAACI,KAAK,CAACD,IAAI,EAAE,GAAG;IAC5H;EACF,CAAC;AAAA,CAAC,CAAC;AACH,MAAME,iBAAiB,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EACvDC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC;AACF,MAAMC,UAAU,GAAG,aAAa7B,KAAK,CAAC8B,IAAI,CAAC,SAASD,UAAUA,CAACE,KAAK,EAAE;EACpE,MAAM;IACJC;EACF,CAAC,GAAGD,KAAK;EACT,OAAO,aAAa1B,IAAI,CAACC,KAAK,EAAE;IAC9B2B,SAAS,EAAEhC,IAAI,CAAC+B,KAAK,GAAG,OAAO,IAAI,MAAM,EAAEA,KAAK,GAAG,OAAO,IAAI,KAAK,CAAC;IACpEE,QAAQ,EAAEV,iBAAiB,CAACW,MAAM,CAACH,KAAK;EAC1C,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,OAAO,SAASI,gBAAgBA,CAACC,MAAM,EAAE;EACvC,IAAIA,MAAM,CAACL,KAAK,IAAI,IAAI,EAAE;IACxB,OAAO,EAAE;EACX;;EAEA;EACA;EACA,IAAIK,MAAM,CAACC,WAAW,IAAI,CAACD,MAAM,CAACC,WAAW,CAACC,WAAW,EAAE;IACzD,OAAO,IAAI;EACb;EACA,OAAO,aAAalC,IAAI,CAACwB,UAAU,EAAE;IACnCG,KAAK,EAAEK,MAAM,CAACL;EAChB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}