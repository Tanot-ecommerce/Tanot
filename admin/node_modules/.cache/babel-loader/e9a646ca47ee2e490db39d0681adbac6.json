{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnVisibilityModelSelector } from '@mui/x-data-grid-pro';\nconst updateColumnVisibilityModel = (columnVisibilityModel, rowGroupingModel, prevRowGroupingModel) => {\n  const newColumnVisibilityModel = _extends({}, columnVisibilityModel);\n  rowGroupingModel == null ? void 0 : rowGroupingModel.forEach(field => {\n    if (!(prevRowGroupingModel != null && prevRowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = false;\n    }\n  });\n  prevRowGroupingModel == null ? void 0 : prevRowGroupingModel.forEach(field => {\n    if (!(rowGroupingModel != null && rowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = true;\n    }\n  });\n  return newColumnVisibilityModel;\n};\n\n/**\n * Automatically hide columns when added to the row grouping model and stop hiding them when they are removed.\n * Handles both the `props.initialState.rowGrouping.model` and `props.rowGroupingModel`\n * Does not work when used with the `hide` property of `GridColDef`\n */\nexport const useKeepGroupedColumnsHidden = props => {\n  var _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n  const initialProps = React.useRef(props);\n  const rowGroupingModel = React.useRef((_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model);\n  React.useEffect(() => {\n    props.apiRef.current.subscribeEvent('rowGroupingModelChange', newModel => {\n      const columnVisibilityModel = updateColumnVisibilityModel(gridColumnVisibilityModelSelector(props.apiRef), newModel, rowGroupingModel.current);\n      props.apiRef.current.setColumnVisibilityModel(columnVisibilityModel);\n      rowGroupingModel.current = newModel;\n    });\n  }, [props.apiRef]);\n  return React.useMemo(() => {\n    var _invariantInitialStat;\n    const invariantInitialState = initialProps.current.initialState;\n    const columnVisibilityModel = updateColumnVisibilityModel(invariantInitialState == null ? void 0 : (_invariantInitialStat = invariantInitialState.columns) == null ? void 0 : _invariantInitialStat.columnVisibilityModel, rowGroupingModel.current, undefined);\n    return _extends({}, invariantInitialState, {\n      columns: _extends({}, invariantInitialState == null ? void 0 : invariantInitialState.columns, {\n        columnVisibilityModel\n      })\n    });\n  }, []);\n};","map":{"version":3,"names":["_extends","React","gridColumnVisibilityModelSelector","updateColumnVisibilityModel","columnVisibilityModel","rowGroupingModel","prevRowGroupingModel","newColumnVisibilityModel","forEach","field","includes","useKeepGroupedColumnsHidden","props","_props$rowGroupingMod","_props$initialState","_props$initialState$r","initialProps","useRef","initialState","rowGrouping","model","useEffect","apiRef","current","subscribeEvent","newModel","setColumnVisibilityModel","useMemo","_invariantInitialStat","invariantInitialState","columns","undefined"],"sources":["D:/Tanot/admin/node_modules/@mui/x-data-grid-generator/node_modules/@mui/x-data-grid-premium/hooks/utils/useKeepGroupedColumnsHidden.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnVisibilityModelSelector } from '@mui/x-data-grid-pro';\nconst updateColumnVisibilityModel = (columnVisibilityModel, rowGroupingModel, prevRowGroupingModel) => {\n  const newColumnVisibilityModel = _extends({}, columnVisibilityModel);\n  rowGroupingModel == null ? void 0 : rowGroupingModel.forEach(field => {\n    if (!(prevRowGroupingModel != null && prevRowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = false;\n    }\n  });\n  prevRowGroupingModel == null ? void 0 : prevRowGroupingModel.forEach(field => {\n    if (!(rowGroupingModel != null && rowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = true;\n    }\n  });\n  return newColumnVisibilityModel;\n};\n\n/**\n * Automatically hide columns when added to the row grouping model and stop hiding them when they are removed.\n * Handles both the `props.initialState.rowGrouping.model` and `props.rowGroupingModel`\n * Does not work when used with the `hide` property of `GridColDef`\n */\nexport const useKeepGroupedColumnsHidden = props => {\n  var _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n  const initialProps = React.useRef(props);\n  const rowGroupingModel = React.useRef((_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model);\n  React.useEffect(() => {\n    props.apiRef.current.subscribeEvent('rowGroupingModelChange', newModel => {\n      const columnVisibilityModel = updateColumnVisibilityModel(gridColumnVisibilityModelSelector(props.apiRef), newModel, rowGroupingModel.current);\n      props.apiRef.current.setColumnVisibilityModel(columnVisibilityModel);\n      rowGroupingModel.current = newModel;\n    });\n  }, [props.apiRef]);\n  return React.useMemo(() => {\n    var _invariantInitialStat;\n    const invariantInitialState = initialProps.current.initialState;\n    const columnVisibilityModel = updateColumnVisibilityModel(invariantInitialState == null ? void 0 : (_invariantInitialStat = invariantInitialState.columns) == null ? void 0 : _invariantInitialStat.columnVisibilityModel, rowGroupingModel.current, undefined);\n    return _extends({}, invariantInitialState, {\n      columns: _extends({}, invariantInitialState == null ? void 0 : invariantInitialState.columns, {\n        columnVisibilityModel\n      })\n    });\n  }, []);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}