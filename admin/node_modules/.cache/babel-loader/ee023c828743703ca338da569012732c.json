{"ast":null,"code":"import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: _ref => {\n    let {\n      values\n    } = _ref;\n    let sum = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null) {\n        sum += value;\n      }\n    }\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: params => {\n    if (params.values.length === 0) {\n      return null;\n    }\n    const sum = sumAgg.apply(params);\n    return sum / params.values.length;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: _ref2 => {\n    let {\n      values\n    } = _ref2;\n    if (values.length === 0) {\n      return null;\n    }\n    let min = +Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: _ref3 => {\n    let {\n      values\n    } = _ref3;\n    if (values.length === 0) {\n      return null;\n    }\n    let max = -Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: _ref4 => {\n    let {\n      values\n    } = _ref4;\n    return values.length;\n  },\n  valueFormatter: params => {\n    if (params.value == null || !isNumber(params.value)) {\n      return params.value;\n    }\n    return params.value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};","map":{"version":3,"names":["isNumber","sumAgg","apply","_ref","values","sum","i","length","value","columnTypes","avgAgg","params","minAgg","_ref2","min","Infinity","maxAgg","_ref3","max","sizeAgg","_ref4","valueFormatter","toLocaleString","hasCellUnit","GRID_AGGREGATION_FUNCTIONS","avg","size"],"sources":["D:/Tanot/admin/node_modules/@mui/x-data-grid-generator/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/gridAggregationFunctions.js"],"sourcesContent":["import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: ({\n    values\n  }) => {\n    let sum = 0;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null) {\n        sum += value;\n      }\n    }\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: params => {\n    if (params.values.length === 0) {\n      return null;\n    }\n    const sum = sumAgg.apply(params);\n    return sum / params.values.length;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let min = +Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n    let max = -Infinity;\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: ({\n    values\n  }) => {\n    return values.length;\n  },\n  valueFormatter: params => {\n    if (params.value == null || !isNumber(params.value)) {\n      return params.value;\n    }\n    return params.value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}