{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableVirtualization\"];\nimport * as React from 'react';\nimport { styled, alpha, useTheme } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridSelector, getDataGridUtilityClass, gridClasses, gridVisibleColumnFieldsSelector, gridRowsMetaSelector, useGridApiEventHandler, GridOverlays } from '@mui/x-data-grid';\nimport { GridVirtualScroller, GridVirtualScrollerContent, GridVirtualScrollerRenderZone, useGridVirtualScroller, calculatePinnedRowsHeight } from '@mui/x-data-grid/internals';\nimport { useGridPrivateApiContext } from '../hooks/utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridPinnedColumnsSelector, GridPinnedPosition } from '../hooks/features/columnPinning';\nimport { gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelExpandedRowIdsSelector } from '../hooks/features/detailPanel';\nimport { GridDetailPanel } from './GridDetailPanel';\nimport { gridPinnedRowsSelector } from '../hooks/features/rowPinning/gridRowPinningSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const filterColumns = (pinnedColumns, columns, invert) => {\n  var _pinnedColumns$left, _pinnedColumns$right;\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return [[], []];\n  }\n  if (((_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) === 0 && ((_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) === 0) {\n    return [[], []];\n  }\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter(\n  // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  if (invert) {\n    return [rightPinnedColumns, leftPinnedColumns];\n  }\n  return [leftPinnedColumns, rightPinnedColumns];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    leftPinnedColumns: ['pinnedColumns', 'pinnedColumns--left'],\n    rightPinnedColumns: ['pinnedColumns', 'pinnedColumns--right', 'withBorderColor'],\n    topPinnedRows: ['pinnedRows', 'pinnedRows--top'],\n    bottomPinnedRows: ['pinnedRows', 'pinnedRows--bottom'],\n    pinnedRowsRenderZone: ['pinnedRowsRenderZone'],\n    detailPanels: ['detailPanels'],\n    detailPanel: ['detailPanel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61\nconst getOverlayAlpha = elevation => {\n  let alphaValue;\n  if (elevation < 1) {\n    alphaValue = 5.11916 * elevation ** 2;\n  } else {\n    alphaValue = 4.5 * Math.log(elevation + 1) + 2;\n  }\n  return alphaValue / 100;\n};\nconst getBoxShadowColor = theme => {\n  return theme.vars ? `rgba(0 0 0 /  0.21)` : alpha(theme.palette.common.black, 0.21);\n};\nconst VirtualScrollerDetailPanels = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'DetailPanels',\n  overridesResolver: (props, styles) => styles.detailPanels\n})({\n  position: 'relative'\n});\nconst darkModeBackgroundImage = `linear-gradient(${alpha('#fff', getOverlayAlpha(2))}, ${alpha('#fff', getOverlayAlpha(2))})`;\nconst VirtualScrollerPinnedColumns = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedColumns',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedColumns--left']}`]: styles['pinnedColumns--left']\n  }, {\n    [`&.${gridClasses['pinnedColumns--right']}`]: styles['pinnedColumns--right']\n  }, styles.pinnedColumns]\n})(_ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  var _theme$vars$overlays;\n  const boxShadowColor = getBoxShadowColor(theme);\n  return _extends({\n    position: 'sticky',\n    overflow: 'hidden',\n    zIndex: 1,\n    backgroundColor: (theme.vars || theme).palette.background.default\n  }, theme.vars ? {\n    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[2]\n  } : _extends({}, theme.palette.mode === 'dark' && {\n    backgroundImage: darkModeBackgroundImage\n  }), ownerState.side === GridPinnedPosition.left && {\n    left: 0,\n    float: 'left',\n    boxShadow: `2px 0px 4px -2px ${boxShadowColor}`\n  }, ownerState.side === GridPinnedPosition.right && {\n    right: 0,\n    float: 'right',\n    boxShadow: `-2px 0px 4px -2px ${boxShadowColor}`\n  }, ownerState.side === GridPinnedPosition.right && ownerState.showCellVerticalBorder && {\n    borderLeftWidth: '1px',\n    borderLeftStyle: 'solid'\n  });\n});\nvar PinnedRowsPosition = /*#__PURE__*/function (PinnedRowsPosition) {\n  PinnedRowsPosition[\"top\"] = \"top\";\n  PinnedRowsPosition[\"bottom\"] = \"bottom\";\n  return PinnedRowsPosition;\n}(PinnedRowsPosition || {});\nconst VirtualScrollerPinnedRows = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedRows',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedRows--top']}`]: styles['pinnedRows--top']\n  }, {\n    [`&.${gridClasses['pinnedRows--bottom']}`]: styles['pinnedRows--bottom']\n  }, styles.pinnedRows]\n})(_ref2 => {\n  let {\n    theme,\n    ownerState\n  } = _ref2;\n  var _theme$vars$overlays2;\n  const boxShadowColor = getBoxShadowColor(theme);\n  return _extends({\n    position: 'sticky',\n    // should be above the detail panel\n    zIndex: 3,\n    backgroundColor: (theme.vars || theme).palette.background.default\n  }, theme.vars ? {\n    backgroundImage: (_theme$vars$overlays2 = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays2[2]\n  } : _extends({}, theme.palette.mode === 'dark' && {\n    backgroundImage: darkModeBackgroundImage\n  }), ownerState.position === 'top' && {\n    top: 0,\n    boxShadow: `0px 3px 4px -2px ${boxShadowColor}`\n  }, ownerState.position === PinnedRowsPosition.bottom && {\n    boxShadow: `0px -3px 4px -2px ${boxShadowColor}`,\n    bottom: 0\n  });\n});\nconst VirtualScrollerPinnedRowsRenderZone = styled('div')({\n  position: 'absolute'\n});\nconst DataGridProVirtualScroller = /*#__PURE__*/React.forwardRef(function DataGridProVirtualScroller(props, ref) {\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumnFields = useGridSelector(apiRef, gridVisibleColumnFieldsSelector);\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const detailPanelsContent = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const detailPanelsHeights = useGridSelector(apiRef, gridDetailPanelExpandedRowsHeightCacheSelector);\n  const leftColumns = React.useRef(null);\n  const rightColumns = React.useRef(null);\n  const topPinnedRowsRenderZoneRef = React.useRef(null);\n  const bottomPinnedRowsRenderZoneRef = React.useRef(null);\n  const theme = useTheme();\n  const handleRenderZonePositioning = React.useCallback(_ref3 => {\n    let {\n      top,\n      left\n    } = _ref3;\n    if (leftColumns.current) {\n      leftColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n    if (rightColumns.current) {\n      rightColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n    if (topPinnedRowsRenderZoneRef.current) {\n      topPinnedRowsRenderZoneRef.current.style.transform = `translate3d(${left}px, 0px, 0px)`;\n    }\n    if (bottomPinnedRowsRenderZoneRef.current) {\n      bottomPinnedRowsRenderZoneRef.current.style.transform = `translate3d(${left}px, 0px, 0px)`;\n    }\n  }, []);\n\n  // Create a lookup for faster check if the row is expanded\n  const expandedRowIdsLookup = React.useMemo(() => {\n    const lookup = new Set();\n    expandedRowIds.forEach(id => {\n      lookup.add(id);\n    });\n    return lookup;\n  }, [expandedRowIds]);\n  const getRowProps = React.useCallback(id => {\n    if (!expandedRowIdsLookup.has(id)) {\n      return null;\n    }\n    const height = detailPanelsHeights[id];\n    return {\n      style: {\n        marginBottom: height\n      }\n    };\n  }, [detailPanelsHeights, expandedRowIdsLookup]);\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields, theme.direction === 'rtl');\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const topPinnedRowsData = React.useMemo(() => (pinnedRows == null ? void 0 : pinnedRows.top) || [], [pinnedRows == null ? void 0 : pinnedRows.top]);\n  const bottomPinnedRowsData = React.useMemo(() => (pinnedRows == null ? void 0 : pinnedRows.bottom) || [], [pinnedRows == null ? void 0 : pinnedRows.bottom]);\n  const ownerState = _extends({}, rootProps, {\n    classes: rootProps.classes\n  });\n  const classes = useUtilityClasses(ownerState);\n  const {\n    renderContext,\n    getRows,\n    getRootProps,\n    getContentProps,\n    getRenderZoneProps,\n    updateRenderZonePosition\n  } = useGridVirtualScroller(_extends({\n    ref,\n    renderZoneMinColumnIndex: leftPinnedColumns.length,\n    renderZoneMaxColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    onRenderZonePositioning: handleRenderZonePositioning,\n    getRowProps\n  }, props));\n  const refreshRenderZonePosition = React.useCallback(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  useGridApiEventHandler(apiRef, 'columnWidthChange', refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, 'rowOrderChange', refreshRenderZonePosition);\n  const leftRenderContext = renderContext && leftPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: 0,\n    lastColumnIndex: leftPinnedColumns.length\n  }) : null;\n  const rightRenderContext = renderContext && rightPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    lastColumnIndex: visibleColumnFields.length\n  }) : null;\n  const getDetailPanel = rowId => {\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const content = detailPanelsContent[rowId];\n\n    // Check if the id exists in the current page\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n    const exists = rowIndex !== undefined;\n    if ( /*#__PURE__*/React.isValidElement(content) && exists) {\n      const hasAutoHeight = apiRef.current.detailPanelHasAutoHeight(rowId);\n      const height = hasAutoHeight ? 'auto' : detailPanelsHeights[rowId];\n      const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n      const spacingTop = (sizes == null ? void 0 : sizes.spacingTop) || 0;\n      const top = rowsMeta.positions[rowIndex] + apiRef.current.unstable_getRowHeight(rowId) + spacingTop;\n      return /*#__PURE__*/_jsx(GridDetailPanel, {\n        rowId: rowId,\n        style: {\n          top\n        },\n        height: height,\n        className: classes.detailPanel,\n        children: content\n      }, rowId);\n    }\n    return null;\n  };\n  const detailPanels = [];\n  const topPinnedRows = getRows({\n    renderContext,\n    rows: topPinnedRowsData,\n    position: 'center'\n  });\n  const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n  const mainRows = getRows({\n    renderContext,\n    rowIndexOffset: topPinnedRowsData.length,\n    position: 'center',\n    onRowRender: rowId => {\n      if (rootProps.getDetailPanelContent == null) {\n        return;\n      }\n      if (!expandedRowIdsLookup.has(rowId)) {\n        return;\n      }\n      const detailPanel = getDetailPanel(rowId);\n      if (detailPanel) {\n        detailPanels.push(detailPanel);\n      }\n    }\n  });\n  const bottomPinnedRows = getRows({\n    renderContext,\n    rows: bottomPinnedRowsData,\n    rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n    position: 'center'\n  });\n  const contentProps = getContentProps();\n  const pinnedColumnsStyle = {\n    minHeight: contentProps.style.minHeight\n  };\n  if (contentProps.style.minHeight && contentProps.style.minHeight === '100%') {\n    contentProps.style.minHeight = `calc(100% - ${pinnedRowsHeight.top}px - ${pinnedRowsHeight.bottom}px)`;\n  }\n  return /*#__PURE__*/_jsxs(GridVirtualScroller, _extends({}, getRootProps(other), {\n    children: [/*#__PURE__*/_jsx(GridOverlays, {}), topPinnedRowsData.length > 0 ? /*#__PURE__*/_jsxs(VirtualScrollerPinnedRows, {\n      className: classes.topPinnedRows,\n      ownerState: _extends({}, ownerState, {\n        position: PinnedRowsPosition.top\n      }),\n      style: {\n        width: contentProps.style.width,\n        height: pinnedRowsHeight.top\n      },\n      role: \"rowgroup\",\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.leftPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.left,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: topPinnedRowsData,\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(VirtualScrollerPinnedRowsRenderZone, {\n        className: classes.pinnedRowsRenderZone,\n        ref: topPinnedRowsRenderZoneRef,\n        role: \"presentation\",\n        children: topPinnedRows\n      }), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.rightPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.right,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: topPinnedRowsData,\n          position: 'right'\n        })\n      })]\n    }) : null, /*#__PURE__*/_jsxs(GridVirtualScrollerContent, _extends({}, contentProps, {\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: leftColumns,\n        className: classes.leftPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.left,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rowIndexOffset: topPinnedRowsData.length,\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {\n        children: mainRows\n      })), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: rightColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.right,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        className: classes.rightPinnedColumns,\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rowIndexOffset: topPinnedRowsData.length,\n          position: 'right'\n        })\n      }), detailPanels.length > 0 && /*#__PURE__*/_jsx(VirtualScrollerDetailPanels, {\n        className: classes.detailPanels,\n        ownerState: ownerState,\n        children: detailPanels\n      })]\n    })), bottomPinnedRowsData.length > 0 ? /*#__PURE__*/_jsxs(VirtualScrollerPinnedRows, {\n      className: classes.bottomPinnedRows,\n      ownerState: _extends({}, ownerState, {\n        position: PinnedRowsPosition.bottom\n      }),\n      style: {\n        width: contentProps.style.width,\n        height: pinnedRowsHeight.bottom\n      },\n      role: \"rowgroup\",\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.leftPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.left,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: bottomPinnedRowsData,\n          rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(VirtualScrollerPinnedRowsRenderZone, {\n        className: classes.pinnedRowsRenderZone,\n        ref: bottomPinnedRowsRenderZoneRef,\n        role: \"presentation\",\n        children: bottomPinnedRows\n      }), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.rightPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.right,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: bottomPinnedRowsData,\n          rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n          position: 'right'\n        })\n      })]\n    }) : null]\n  }));\n});\nexport { DataGridProVirtualScroller };","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","styled","alpha","useTheme","unstable_composeClasses","composeClasses","useGridSelector","getDataGridUtilityClass","gridClasses","gridVisibleColumnFieldsSelector","gridRowsMetaSelector","useGridApiEventHandler","GridOverlays","GridVirtualScroller","GridVirtualScrollerContent","GridVirtualScrollerRenderZone","useGridVirtualScroller","calculatePinnedRowsHeight","useGridPrivateApiContext","useGridRootProps","gridPinnedColumnsSelector","GridPinnedPosition","gridDetailPanelExpandedRowsContentCacheSelector","gridDetailPanelExpandedRowsHeightCacheSelector","gridDetailPanelExpandedRowIdsSelector","GridDetailPanel","gridPinnedRowsSelector","jsx","_jsx","jsxs","_jsxs","filterColumns","pinnedColumns","columns","invert","_pinnedColumns$left","_pinnedColumns$right","Array","isArray","left","right","length","filter","newPinnedColumns","remainingColumns","field","includes","leftPinnedColumns","columnsWithoutLeftPinnedColumns","rightPinnedColumns","useUtilityClasses","ownerState","classes","slots","topPinnedRows","bottomPinnedRows","pinnedRowsRenderZone","detailPanels","detailPanel","getOverlayAlpha","elevation","alphaValue","Math","log","getBoxShadowColor","theme","vars","palette","common","black","VirtualScrollerDetailPanels","name","slot","overridesResolver","props","styles","position","darkModeBackgroundImage","VirtualScrollerPinnedColumns","_ref","_theme$vars$overlays","boxShadowColor","overflow","zIndex","backgroundColor","background","default","backgroundImage","overlays","mode","side","float","boxShadow","showCellVerticalBorder","borderLeftWidth","borderLeftStyle","PinnedRowsPosition","VirtualScrollerPinnedRows","pinnedRows","_ref2","_theme$vars$overlays2","top","bottom","VirtualScrollerPinnedRowsRenderZone","DataGridProVirtualScroller","forwardRef","ref","other","apiRef","rootProps","visibleColumnFields","expandedRowIds","detailPanelsContent","detailPanelsHeights","leftColumns","useRef","rightColumns","topPinnedRowsRenderZoneRef","bottomPinnedRowsRenderZoneRef","handleRenderZonePositioning","useCallback","_ref3","current","style","transform","expandedRowIdsLookup","useMemo","lookup","Set","forEach","id","add","getRowProps","has","height","marginBottom","direction","topPinnedRowsData","bottomPinnedRowsData","renderContext","getRows","getRootProps","getContentProps","getRenderZoneProps","updateRenderZonePosition","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","onRenderZonePositioning","refreshRenderZonePosition","leftRenderContext","firstColumnIndex","lastColumnIndex","rightRenderContext","getDetailPanel","rowId","rowsMeta","state","content","rowIndex","getRowIndexRelativeToVisibleRows","exists","undefined","isValidElement","hasAutoHeight","detailPanelHasAutoHeight","sizes","unstable_getRowInternalSizes","spacingTop","positions","unstable_getRowHeight","className","children","rows","pinnedRowsHeight","mainRows","rowIndexOffset","onRowRender","getDetailPanelContent","push","contentProps","pinnedColumnsStyle","minHeight","width","role","minFirstColumn","maxLastColumn","availableSpace"],"sources":["D:/Tanot/admin/node_modules/@mui/x-data-grid-generator/node_modules/@mui/x-data-grid-premium/node_modules/@mui/x-data-grid-pro/components/DataGridProVirtualScroller.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableVirtualization\"];\nimport * as React from 'react';\nimport { styled, alpha, useTheme } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridSelector, getDataGridUtilityClass, gridClasses, gridVisibleColumnFieldsSelector, gridRowsMetaSelector, useGridApiEventHandler, GridOverlays } from '@mui/x-data-grid';\nimport { GridVirtualScroller, GridVirtualScrollerContent, GridVirtualScrollerRenderZone, useGridVirtualScroller, calculatePinnedRowsHeight } from '@mui/x-data-grid/internals';\nimport { useGridPrivateApiContext } from '../hooks/utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridPinnedColumnsSelector, GridPinnedPosition } from '../hooks/features/columnPinning';\nimport { gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, gridDetailPanelExpandedRowIdsSelector } from '../hooks/features/detailPanel';\nimport { GridDetailPanel } from './GridDetailPanel';\nimport { gridPinnedRowsSelector } from '../hooks/features/rowPinning/gridRowPinningSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const filterColumns = (pinnedColumns, columns, invert) => {\n  var _pinnedColumns$left, _pinnedColumns$right;\n  if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n    return [[], []];\n  }\n  if (((_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) === 0 && ((_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) === 0) {\n    return [[], []];\n  }\n  const filter = (newPinnedColumns, remainingColumns) => {\n    if (!Array.isArray(newPinnedColumns)) {\n      return [];\n    }\n    return newPinnedColumns.filter(field => remainingColumns.includes(field));\n  };\n  const leftPinnedColumns = filter(pinnedColumns.left, columns);\n  const columnsWithoutLeftPinnedColumns = columns.filter(\n  // Filter out from the remaining columns those columns already pinned to the left\n  field => !leftPinnedColumns.includes(field));\n  const rightPinnedColumns = filter(pinnedColumns.right, columnsWithoutLeftPinnedColumns);\n  if (invert) {\n    return [rightPinnedColumns, leftPinnedColumns];\n  }\n  return [leftPinnedColumns, rightPinnedColumns];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    leftPinnedColumns: ['pinnedColumns', 'pinnedColumns--left'],\n    rightPinnedColumns: ['pinnedColumns', 'pinnedColumns--right', 'withBorderColor'],\n    topPinnedRows: ['pinnedRows', 'pinnedRows--top'],\n    bottomPinnedRows: ['pinnedRows', 'pinnedRows--bottom'],\n    pinnedRowsRenderZone: ['pinnedRowsRenderZone'],\n    detailPanels: ['detailPanels'],\n    detailPanel: ['detailPanel']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61\nconst getOverlayAlpha = elevation => {\n  let alphaValue;\n  if (elevation < 1) {\n    alphaValue = 5.11916 * elevation ** 2;\n  } else {\n    alphaValue = 4.5 * Math.log(elevation + 1) + 2;\n  }\n  return alphaValue / 100;\n};\nconst getBoxShadowColor = theme => {\n  return theme.vars ? `rgba(0 0 0 /  0.21)` : alpha(theme.palette.common.black, 0.21);\n};\nconst VirtualScrollerDetailPanels = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'DetailPanels',\n  overridesResolver: (props, styles) => styles.detailPanels\n})({\n  position: 'relative'\n});\nconst darkModeBackgroundImage = `linear-gradient(${alpha('#fff', getOverlayAlpha(2))}, ${alpha('#fff', getOverlayAlpha(2))})`;\nconst VirtualScrollerPinnedColumns = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedColumns',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedColumns--left']}`]: styles['pinnedColumns--left']\n  }, {\n    [`&.${gridClasses['pinnedColumns--right']}`]: styles['pinnedColumns--right']\n  }, styles.pinnedColumns]\n})(({\n  theme,\n  ownerState\n}) => {\n  var _theme$vars$overlays;\n  const boxShadowColor = getBoxShadowColor(theme);\n  return _extends({\n    position: 'sticky',\n    overflow: 'hidden',\n    zIndex: 1,\n    backgroundColor: (theme.vars || theme).palette.background.default\n  }, theme.vars ? {\n    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[2]\n  } : _extends({}, theme.palette.mode === 'dark' && {\n    backgroundImage: darkModeBackgroundImage\n  }), ownerState.side === GridPinnedPosition.left && {\n    left: 0,\n    float: 'left',\n    boxShadow: `2px 0px 4px -2px ${boxShadowColor}`\n  }, ownerState.side === GridPinnedPosition.right && {\n    right: 0,\n    float: 'right',\n    boxShadow: `-2px 0px 4px -2px ${boxShadowColor}`\n  }, ownerState.side === GridPinnedPosition.right && ownerState.showCellVerticalBorder && {\n    borderLeftWidth: '1px',\n    borderLeftStyle: 'solid'\n  });\n});\nvar PinnedRowsPosition = /*#__PURE__*/function (PinnedRowsPosition) {\n  PinnedRowsPosition[\"top\"] = \"top\";\n  PinnedRowsPosition[\"bottom\"] = \"bottom\";\n  return PinnedRowsPosition;\n}(PinnedRowsPosition || {});\nconst VirtualScrollerPinnedRows = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'PinnedRows',\n  overridesResolver: (props, styles) => [{\n    [`&.${gridClasses['pinnedRows--top']}`]: styles['pinnedRows--top']\n  }, {\n    [`&.${gridClasses['pinnedRows--bottom']}`]: styles['pinnedRows--bottom']\n  }, styles.pinnedRows]\n})(({\n  theme,\n  ownerState\n}) => {\n  var _theme$vars$overlays2;\n  const boxShadowColor = getBoxShadowColor(theme);\n  return _extends({\n    position: 'sticky',\n    // should be above the detail panel\n    zIndex: 3,\n    backgroundColor: (theme.vars || theme).palette.background.default\n  }, theme.vars ? {\n    backgroundImage: (_theme$vars$overlays2 = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays2[2]\n  } : _extends({}, theme.palette.mode === 'dark' && {\n    backgroundImage: darkModeBackgroundImage\n  }), ownerState.position === 'top' && {\n    top: 0,\n    boxShadow: `0px 3px 4px -2px ${boxShadowColor}`\n  }, ownerState.position === PinnedRowsPosition.bottom && {\n    boxShadow: `0px -3px 4px -2px ${boxShadowColor}`,\n    bottom: 0\n  });\n});\nconst VirtualScrollerPinnedRowsRenderZone = styled('div')({\n  position: 'absolute'\n});\nconst DataGridProVirtualScroller = /*#__PURE__*/React.forwardRef(function DataGridProVirtualScroller(props, ref) {\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumnFields = useGridSelector(apiRef, gridVisibleColumnFieldsSelector);\n  const expandedRowIds = useGridSelector(apiRef, gridDetailPanelExpandedRowIdsSelector);\n  const detailPanelsContent = useGridSelector(apiRef, gridDetailPanelExpandedRowsContentCacheSelector);\n  const detailPanelsHeights = useGridSelector(apiRef, gridDetailPanelExpandedRowsHeightCacheSelector);\n  const leftColumns = React.useRef(null);\n  const rightColumns = React.useRef(null);\n  const topPinnedRowsRenderZoneRef = React.useRef(null);\n  const bottomPinnedRowsRenderZoneRef = React.useRef(null);\n  const theme = useTheme();\n  const handleRenderZonePositioning = React.useCallback(({\n    top,\n    left\n  }) => {\n    if (leftColumns.current) {\n      leftColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n    if (rightColumns.current) {\n      rightColumns.current.style.transform = `translate3d(0px, ${top}px, 0px)`;\n    }\n    if (topPinnedRowsRenderZoneRef.current) {\n      topPinnedRowsRenderZoneRef.current.style.transform = `translate3d(${left}px, 0px, 0px)`;\n    }\n    if (bottomPinnedRowsRenderZoneRef.current) {\n      bottomPinnedRowsRenderZoneRef.current.style.transform = `translate3d(${left}px, 0px, 0px)`;\n    }\n  }, []);\n\n  // Create a lookup for faster check if the row is expanded\n  const expandedRowIdsLookup = React.useMemo(() => {\n    const lookup = new Set();\n    expandedRowIds.forEach(id => {\n      lookup.add(id);\n    });\n    return lookup;\n  }, [expandedRowIds]);\n  const getRowProps = React.useCallback(id => {\n    if (!expandedRowIdsLookup.has(id)) {\n      return null;\n    }\n    const height = detailPanelsHeights[id];\n    return {\n      style: {\n        marginBottom: height\n      }\n    };\n  }, [detailPanelsHeights, expandedRowIdsLookup]);\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector);\n  const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields, theme.direction === 'rtl');\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const topPinnedRowsData = React.useMemo(() => (pinnedRows == null ? void 0 : pinnedRows.top) || [], [pinnedRows == null ? void 0 : pinnedRows.top]);\n  const bottomPinnedRowsData = React.useMemo(() => (pinnedRows == null ? void 0 : pinnedRows.bottom) || [], [pinnedRows == null ? void 0 : pinnedRows.bottom]);\n  const ownerState = _extends({}, rootProps, {\n    classes: rootProps.classes\n  });\n  const classes = useUtilityClasses(ownerState);\n  const {\n    renderContext,\n    getRows,\n    getRootProps,\n    getContentProps,\n    getRenderZoneProps,\n    updateRenderZonePosition\n  } = useGridVirtualScroller(_extends({\n    ref,\n    renderZoneMinColumnIndex: leftPinnedColumns.length,\n    renderZoneMaxColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    onRenderZonePositioning: handleRenderZonePositioning,\n    getRowProps\n  }, props));\n  const refreshRenderZonePosition = React.useCallback(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  useGridApiEventHandler(apiRef, 'columnWidthChange', refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', refreshRenderZonePosition);\n  useGridApiEventHandler(apiRef, 'rowOrderChange', refreshRenderZonePosition);\n  const leftRenderContext = renderContext && leftPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: 0,\n    lastColumnIndex: leftPinnedColumns.length\n  }) : null;\n  const rightRenderContext = renderContext && rightPinnedColumns.length > 0 ? _extends({}, renderContext, {\n    firstColumnIndex: visibleColumnFields.length - rightPinnedColumns.length,\n    lastColumnIndex: visibleColumnFields.length\n  }) : null;\n  const getDetailPanel = rowId => {\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const content = detailPanelsContent[rowId];\n\n    // Check if the id exists in the current page\n    const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n    const exists = rowIndex !== undefined;\n    if ( /*#__PURE__*/React.isValidElement(content) && exists) {\n      const hasAutoHeight = apiRef.current.detailPanelHasAutoHeight(rowId);\n      const height = hasAutoHeight ? 'auto' : detailPanelsHeights[rowId];\n      const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);\n      const spacingTop = (sizes == null ? void 0 : sizes.spacingTop) || 0;\n      const top = rowsMeta.positions[rowIndex] + apiRef.current.unstable_getRowHeight(rowId) + spacingTop;\n      return /*#__PURE__*/_jsx(GridDetailPanel, {\n        rowId: rowId,\n        style: {\n          top\n        },\n        height: height,\n        className: classes.detailPanel,\n        children: content\n      }, rowId);\n    }\n    return null;\n  };\n  const detailPanels = [];\n  const topPinnedRows = getRows({\n    renderContext,\n    rows: topPinnedRowsData,\n    position: 'center'\n  });\n  const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n  const mainRows = getRows({\n    renderContext,\n    rowIndexOffset: topPinnedRowsData.length,\n    position: 'center',\n    onRowRender: rowId => {\n      if (rootProps.getDetailPanelContent == null) {\n        return;\n      }\n      if (!expandedRowIdsLookup.has(rowId)) {\n        return;\n      }\n      const detailPanel = getDetailPanel(rowId);\n      if (detailPanel) {\n        detailPanels.push(detailPanel);\n      }\n    }\n  });\n  const bottomPinnedRows = getRows({\n    renderContext,\n    rows: bottomPinnedRowsData,\n    rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n    position: 'center'\n  });\n  const contentProps = getContentProps();\n  const pinnedColumnsStyle = {\n    minHeight: contentProps.style.minHeight\n  };\n  if (contentProps.style.minHeight && contentProps.style.minHeight === '100%') {\n    contentProps.style.minHeight = `calc(100% - ${pinnedRowsHeight.top}px - ${pinnedRowsHeight.bottom}px)`;\n  }\n  return /*#__PURE__*/_jsxs(GridVirtualScroller, _extends({}, getRootProps(other), {\n    children: [/*#__PURE__*/_jsx(GridOverlays, {}), topPinnedRowsData.length > 0 ? /*#__PURE__*/_jsxs(VirtualScrollerPinnedRows, {\n      className: classes.topPinnedRows,\n      ownerState: _extends({}, ownerState, {\n        position: PinnedRowsPosition.top\n      }),\n      style: {\n        width: contentProps.style.width,\n        height: pinnedRowsHeight.top\n      },\n      role: \"rowgroup\",\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.leftPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.left,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: topPinnedRowsData,\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(VirtualScrollerPinnedRowsRenderZone, {\n        className: classes.pinnedRowsRenderZone,\n        ref: topPinnedRowsRenderZoneRef,\n        role: \"presentation\",\n        children: topPinnedRows\n      }), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.rightPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.right,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: topPinnedRowsData,\n          position: 'right'\n        })\n      })]\n    }) : null, /*#__PURE__*/_jsxs(GridVirtualScrollerContent, _extends({}, contentProps, {\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: leftColumns,\n        className: classes.leftPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.left,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rowIndexOffset: topPinnedRowsData.length,\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {\n        children: mainRows\n      })), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        ref: rightColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.right,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        className: classes.rightPinnedColumns,\n        style: pinnedColumnsStyle,\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rowIndexOffset: topPinnedRowsData.length,\n          position: 'right'\n        })\n      }), detailPanels.length > 0 && /*#__PURE__*/_jsx(VirtualScrollerDetailPanels, {\n        className: classes.detailPanels,\n        ownerState: ownerState,\n        children: detailPanels\n      })]\n    })), bottomPinnedRowsData.length > 0 ? /*#__PURE__*/_jsxs(VirtualScrollerPinnedRows, {\n      className: classes.bottomPinnedRows,\n      ownerState: _extends({}, ownerState, {\n        position: PinnedRowsPosition.bottom\n      }),\n      style: {\n        width: contentProps.style.width,\n        height: pinnedRowsHeight.bottom\n      },\n      role: \"rowgroup\",\n      children: [leftRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.leftPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.left,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: leftRenderContext,\n          minFirstColumn: leftRenderContext.firstColumnIndex,\n          maxLastColumn: leftRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: bottomPinnedRowsData,\n          rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n          position: 'left'\n        })\n      }), /*#__PURE__*/_jsx(VirtualScrollerPinnedRowsRenderZone, {\n        className: classes.pinnedRowsRenderZone,\n        ref: bottomPinnedRowsRenderZoneRef,\n        role: \"presentation\",\n        children: bottomPinnedRows\n      }), rightRenderContext && /*#__PURE__*/_jsx(VirtualScrollerPinnedColumns, {\n        className: classes.rightPinnedColumns,\n        ownerState: _extends({}, ownerState, {\n          side: GridPinnedPosition.right,\n          showCellVerticalBorder: rootProps.showCellVerticalBorder\n        }),\n        children: getRows({\n          renderContext: rightRenderContext,\n          minFirstColumn: rightRenderContext.firstColumnIndex,\n          maxLastColumn: rightRenderContext.lastColumnIndex,\n          availableSpace: 0,\n          rows: bottomPinnedRowsData,\n          rowIndexOffset: topPinnedRowsData.length + (mainRows ? mainRows.length : 0),\n          position: 'right'\n        })\n      })]\n    }) : null]\n  }));\n});\nexport { DataGridProVirtualScroller };"],"mappings":"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"},"metadata":{},"sourceType":"module"}